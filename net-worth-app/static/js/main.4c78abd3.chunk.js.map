{"version":3,"sources":["components/NetWorth/NetWorth.module.css","App.module.css","types/globalTypes.ts","components/AssetDebtTableRow/AssetDeptTableRow.tsx","components/AssetDebtTable/AssetDebtTable.tsx","views/Assets.tsx","views/Debts.tsx","components/NetWorth/NetWorth.tsx","store/assets/actions.ts","components/NewEntry/NewEntry.tsx","store/debts/actions.ts","views/Main.tsx","App.tsx","serviceWorker.ts","store/assets/reducers.ts","store/debts/reducers.ts","store/exchangeRates/reducers.ts","store/index.ts","index.tsx","components/NewEntry/NewEntry.module.css","components/AssetDebtTable/AssetDebtTable.module.css"],"names":["module","exports","CurrencyEnum","RecordTypeEnum","AssetDebtTableRow","item","name","amount","currency","usdValue","exchangeRates","useSelector","state","className","styles","row","toFixed","AssetDebtTable","items","emptyMessage","length","container","header","map","index","key","empty","Assets","assets","totalAssets","reduce","total","current","Debts","debts","totalDebts","NetWorth","defaultValues","type","Asset","USD","NewEntry","useForm","register","handleSubmit","dispatch","useDispatch","form","onSubmit","data","console","log","getState","asset","addAsset","Debt","debt","addDebt","formGroup","input","placeholder","ref","dropdown","value","submit","Main","App","Boolean","window","location","hostname","match","initialState","UAH","EUR","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunk","Root","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4c78abd3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NetWorth_container__194Ih\",\"amount\":\"NetWorth_amount__3nVzc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\"};","import { ThunkAction } from 'redux-thunk';\nimport { AppState } from '../store';\nimport { Action } from 'redux';\n\nexport enum CurrencyEnum {\n  USD = 'USD',\n  EUR = 'EUR',\n  UAH = 'UAH',\n}\n\nexport enum RecordTypeEnum {\n  Asset = \"Asset\",\n  Debt = \"Debt\",\n}\n\nexport type ReduxThunk = ThunkAction<\n  void,\n  AppState,\n  unknown,\n  Action<string>\n>;\n\nexport type AssetDebtType = {\n  name: string;\n  amount: number;\n  currency: CurrencyEnum;\n  usdValue: number;\n}","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AssetDebtType } from '../../types/globalTypes';\nimport { ExchangeRatesState } from '../../store/exchangeRates/types';\n\nimport styles from '../AssetDebtTable/AssetDebtTable.module.css';\n\ninterface AssetDebtTableRowProps {\n  item: AssetDebtType;\n}\n\ninterface AppState {\n  exchangeRates: ExchangeRatesState,\n}\n\nconst AssetDebtTableRow: React.FC<AssetDebtTableRowProps> = ({ item }) => {\n  const { name, amount, currency, usdValue } = item;\n  const exchangeRates = useSelector((state: AppState) => state.exchangeRates);\n\n  return (\n    <div className={styles.row}>\n      <span>{name}</span>\n      <span>{amount}</span>\n      <span>{currency}</span>\n      <span>{exchangeRates[currency]}</span>\n      <span>{usdValue.toFixed(2)}</span>\n    </div>\n  );\n};\n\nexport default AssetDebtTableRow;\n","import React from 'react';\nimport { AssetDebtType } from '../../types/globalTypes';\nimport AssetDebtTableRow from '../AssetDebtTableRow/AssetDeptTableRow';\n\nimport styles from './AssetDebtTable.module.css';\n\ninterface AssetDebtTableProps {\n  items: AssetDebtType[],\n  emptyMessage: string,\n}\n\nconst AssetDebtTable: React.FC<AssetDebtTableProps> = ({ items, emptyMessage }) => {\n  return items.length ? (\n    <div className={styles.container}>\n      <div className={styles.header + ' ' + styles.row}>\n        <span>Name</span>\n        <span>Amount</span>\n        <span>Currency</span>\n        <span>Exchange Rate</span>\n        <span>USD Value</span>\n      </div>\n\n      {items.map((item, index) => (\n        <AssetDebtTableRow key={index} item={item} />\n      ))}\n    </div>\n  ) : (\n    <div className={styles.empty}>{emptyMessage}</div>\n  );\n}\n\nexport default AssetDebtTable;","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AssetsState, AssetType } from '../store/assets/types';\nimport AssetDebtTable from '../components/AssetDebtTable/AssetDebtTable';\n\ninterface AppState {\n  assets: AssetsState;\n}\n\nconst Assets: React.FC = () => {\n  const assets = useSelector((state: AppState) => state.assets);\n  const totalAssets: number = assets.reduce(\n    (total: number, current: AssetType) => total + current.usdValue,\n    0\n  );\n\n  return (\n    <div className=\"table\">\n      <div className=\"table-header\">\n        Assets Overview\n        <span className=\"table-header-total\">\n          Total assets: <span>${totalAssets.toFixed(2)}</span>\n        </span>\n      </div>\n\n      <AssetDebtTable items={assets} emptyMessage=\"You have no assets\" />\n    </div>\n  );\n};\n\nexport default Assets;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { DebtType, DebtsState } from '../store/debts/types';\nimport AssetDebtTable from '../components/AssetDebtTable/AssetDebtTable';\n\ninterface AppState {\n  debts: DebtsState;\n}\n\nconst Debts: React.FC = () => {\n  const debts = useSelector((state: AppState) => state.debts);\n  const totalDebts: number = debts.reduce(\n    (total: number, current: DebtType) => total + current.usdValue,\n    0\n  );\n\n  return (\n    <div className=\"table\">\n      <div className=\"table-header\">\n        Debts Overview\n        <span className=\"table-header-total\">\n          Total debts: <span>${totalDebts.toFixed(2)}</span>\n        </span>\n      </div>\n\n      <AssetDebtTable items={debts} emptyMessage=\"You have no debts\" />\n    </div>\n  );\n};\n\nexport default Debts;\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { AssetsState } from '../../store/assets/types';\nimport { DebtsState } from '../../store/debts/types';\n\nimport styles from './NetWorth.module.css';\n\ninterface RootType {\n  assets: AssetsState,\n  debts: DebtsState\n}\n\nconst NetWorth: React.FC = () => {\n  const [assets, debts] = useSelector((state: RootType) => [state.assets, state.debts]);\n  const totalAssets: number = assets.reduce((total, current) => total + current.usdValue, 0);\n  const totalDebts: number = debts.reduce((total, current) => total + current.usdValue, 0);\n\n  return (\n    <div className={styles.container}>\n      Your net worth: <span className={styles.amount}>${(totalAssets - totalDebts).toFixed(2)}</span>\n    </div>\n  );\n};\n\nexport default NetWorth;\n","import { AssetType } from './types';\nimport { CurrencyEnum, ReduxThunk } from '../../types/globalTypes';\n\nexport const addAsset = (\n  name: string,\n  amount: number,\n  currency: CurrencyEnum\n): ReduxThunk => (dispatch, getState) => {\n  console.log('in dispatch');\n\n  const exchangeRates = getState().exchangeRates;\n  const usdValue: number = amount * exchangeRates[currency];\n\n  const asset: AssetType = {\n    name,\n    amount,\n    currency,\n    usdValue,\n  };\n\n  console.log(asset);\n  dispatch({ type: 'ASSETS_ADD', asset });\n};","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useForm } from 'react-hook-form';\nimport { RecordTypeEnum, CurrencyEnum } from '../../types/globalTypes';\nimport { addAsset } from '../../store/assets/actions';\nimport { addDebt } from '../../store/debts/actions';\n\nimport styles from './NewEntry.module.css';\n\ninterface FormData {\n  name: string;\n  amount: number | null;\n  type: RecordTypeEnum;\n  currency: CurrencyEnum;\n}\n\nconst defaultValues: FormData = {\n  name: '',\n  amount: null,\n  type: RecordTypeEnum.Asset,\n  currency: CurrencyEnum.USD,\n};\n\nconst NewEntry: React.FC = () => {\n  const { register, handleSubmit } = useForm<FormData>({\n    defaultValues,\n  });\n  const dispatch = useDispatch();\n\n  const onSubmit = (data: FormData) => {\n    const { name, amount, type, currency } = data;\n\n    console.log(type, RecordTypeEnum)\n\n    if (type === RecordTypeEnum.Asset) {\n      dispatch(addAsset(name, amount || 0, currency));\n    } else if (type === RecordTypeEnum.Debt) {\n      dispatch(addDebt(name, amount || 0, currency));\n    }\n  };\n\n  return (\n    <div className={styles.container}>\n      Add your funds here\n      <form className={styles.form} onSubmit={handleSubmit(onSubmit)}>\n        <div className={styles.formGroup}>\n          <input\n            className={styles.input}\n            name=\"name\"\n            placeholder=\"Name\"\n            ref={register}\n          />\n\n          <input\n            className={styles.input}\n            type=\"number\"\n            placeholder=\"Amount\"\n            name=\"amount\"\n            ref={register}\n          />\n\n          <select className={styles.dropdown} name=\"type\" ref={register}>\n            <option value={RecordTypeEnum.Asset}>Asset</option>\n            <option value={RecordTypeEnum.Debt}>Debt</option>\n          </select>\n\n          <select className={styles.dropdown} name=\"currency\" ref={register}>\n            <option value=\"USD\">USD</option>\n            <option value=\"EUR\">EUR</option>\n            <option value=\"UAH\">UAH</option>\n          </select>\n        </div>\n\n        <input className={styles.submit} type=\"submit\" value=\"Add\" />\n      </form>\n    </div>\n  );\n};\n\nexport default NewEntry;\n","import { DebtType } from './types';\nimport { CurrencyEnum, ReduxThunk } from '../../types/globalTypes';\n\nexport const addDebt = (\n  name: string,\n  amount: number,\n  currency: CurrencyEnum\n): ReduxThunk => (dispatch, getState) => {\n  const exchangeRates = getState().exchangeRates;\n  const usdValue: number = amount * exchangeRates[currency];\n\n  const debt: DebtType = {\n    name,\n    amount,\n    currency,\n    usdValue,\n  };\n\n  dispatch({ type: 'DEBTS_ADD', debt });\n};\n","import React from 'react';\n\nimport Assets from './Assets';\nimport Debts from './Debts';\nimport NetWorth from '../components/NetWorth';\nimport NewEntry from '../components/NewEntry';\n\nconst Main: React.FC = () => {\n  return (\n    <>\n      <h1>1st net worth app evah</h1>\n      <NetWorth />\n      <NewEntry />\n      <Assets />\n      <Debts />\n    </>\n  )\n}\n\nexport default Main;","import React from 'react';\n\nimport Main from './views/Main';\n\nimport styles from './App.module.css';\n\nconst App: React.FC = () => {\n  return (\n    <div className={styles.container}>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { AssetsState, AssetActionType } from './types';\n\nconst initialState: AssetsState = [];\n\nexport function assetsReducer(\n  state = initialState,\n  action: AssetActionType\n): AssetsState {\n  switch (action.type) {\n    case 'ASSETS_ADD':\n      return [...state, action.asset];\n    default:\n      return state;\n  }\n}\n","import { DebtsState, DebtActionType } from './types';\n\nconst initialState: DebtsState = [];\n\nexport function debtsReducer(\n  state = initialState,\n  action: DebtActionType\n): DebtsState {\n  switch (action.type) {\n    case 'DEBTS_ADD':\n      return [...state, action.debt];\n    default:\n      return state;\n  }\n}\n","import { Action } from 'redux';\nimport { ExchangeRatesState } from './types';\n\nconst initialState: ExchangeRatesState = {\n  USD: 1,\n  UAH: 0.007,\n  EUR: 1.07,\n};\n\nexport function exchangeRatesReducer(\n  state = initialState,\n  action: Action\n): ExchangeRatesState {\n  switch (action.type) {\n    default:\n      return state;\n  }\n}\n","import { createStore, combineReducers, applyMiddleware, Action } from 'redux';\nimport thunk, { ThunkMiddleware } from 'redux-thunk';\n\nimport { assetsReducer } from './assets/reducers';\nimport { debtsReducer } from './debts/reducers';\nimport { exchangeRatesReducer } from './exchangeRates/reducers';\n\nconst rootReducer = combineReducers({\n  assets: assetsReducer,\n  debts: debtsReducer,\n  exchangeRates: exchangeRatesReducer,\n});\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore() {\n  return createStore(rootReducer, {}, applyMiddleware(thunk));\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\n\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nconst Root = () => (\n  <Provider store={store}>\n    <App />\n  </Provider>\n)\n\nReactDOM.render(\n  <React.StrictMode>\n    <Root />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"NewEntry_container__1mK9j\",\"form\":\"NewEntry_form__2Zqz7\",\"formGroup\":\"NewEntry_formGroup__ZNPri\",\"input\":\"NewEntry_input__VzPhv\",\"dropdown\":\"NewEntry_dropdown__1u7zM\",\"submit\":\"NewEntry_submit__3gB29\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"AssetDebtTable_container__2c_I5\",\"row\":\"AssetDebtTable_row__2mM91\",\"header\":\"AssetDebtTable_header__3HeDF\",\"empty\":\"AssetDebtTable_empty__3KIxn\"};"],"sourceRoot":""}